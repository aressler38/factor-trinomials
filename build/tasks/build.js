module.exports = function( grunt ) {
    "use strict";
    var fs = require( "fs" );
    var requirejs = require( "requirejs" );
    var rdefineEnd = /\}\);[^}\w]*$/;

    var config = {
        baseUrl: "./",
        name: "js/main",
        dir: "dist/",
        optimize: "none",
        optimizeCss: "standard",
        mainConfigFile: "js/main.js",
        exclude: ["js/text.js"], // We're handling text plugins separately
        // Include dependencies loaded with require
        findNestedDependencies: true,
        // Avoid breaking semicolons inserted by r.js
        skipSemiColonInsertion: true,
        wrap: {
            startFile: "js/header.part",
            endFile: "js/footer.part"
        },
        fileExclusionRegExp:/^\.|factor-trinomials|node_modules\/*\/*.js|node_modules\/*|build|Gruntfile.js|package.json/,
        preserveLicenseComments: false,
        onBuildWrite: convert
    };

    /**
     * Strip all definitions generated by requirejs
     * Convert "var" modules to var declarations
     * "var module" means the module only contains a return statement that should be converted to a var declaration
     * This is indicated by including the file in any "var" folder
     * @param {String} name
     * @param {String} path
     * @param {String} contents The contents to be written (including their AMD wrappers)
     */
    function convert( name, path, contents ) {
        var amdName;
        // Convert var modules
        if ( /.\/var\//.test( path ) ) {
            contents = contents
                .replace( /define\([\w\W]*?return\s/, "var " + (/var\/([\w-]+)/.exec(name)[1]) + " = " )
                .replace( rdefineEnd, "" );
        }
        else {
            if (name.match(/jquery/)) {
                console.log("IGNORING JQUERY FILE FOR PROCESSING: ", name);
                return contents;
            }
            else if (name.match(/require/)) {
                console.log("IGNORING REQUIREJS FILE FOR PROCESSING: ", name);
                return contents;
            }
            // ignore main module
            switch (name) {
                case "js/main":
                    break;
                case "js/templates":
                    console.log("Building Template module");
                    contents = buildTemplateModule(contents);
                    console.log("Done Building Template module");
                    break;
                default: 
                contents = contents
                    .replace( /\s*return\s+[^\}]+(\}\);[^\w\}]*)$/, "$1" )
                    // Multiple exports
                    .replace( /\s*exports\.\w+\s*=\s*\w+;/g, "" );
            }

            // Remove define wrappers, closure ends, and empty declarations
            contents = contents
                .replace( /define\([^{]*?{/, "" )
                .replace( rdefineEnd, "" );

            // Remove empty definitions
            contents = contents
                .replace( /define\(\[[^\]]+\]\)[\W\n]+$/, "" );
        }
        return contents;
    }



    /**
     * Our build process doesn't handle the require text plugin.
     * Since we are using simple html templates, we will just append each template file's contents
     * to a key of the templates object
     */
    function buildTemplateModule(contents) {
        var header = "var templates = {\n"
        var body   = "";
        var footer = "};";
        var rPath  = /(text!(.*))/;         // get requirejs text! paths.
        var rVars  = /function.*?\((.*)\)/; // get first function declaration with template var names.
        var paths  = [];
        var vars   = null; // will be array
        var result = null;

        do {
            result = rPath.exec(contents);
            if (result !== null && result[2] !== undefined) {
                paths.push(result[2].replace(/"|,/g, ""));
                console.log("Recognized template path: "+paths[paths.length-1]);
                contents = contents.replace(result[1], ""); // remove string.
            }
        } while (result !== null);

        result = null; // clear it
        result = rVars.exec(contents);
        vars = result[1].split(",");
        for (var i = 0; i< vars.length; i++) { console.log(vars[i]); }


        paths.forEach(function(path, index, array) {
            // TODO: Hmmmm... replacing ../ with ./ should be rethought, but it works fine for this project.
            path = path.trim();
            body += vars[index] + ":" + "'" + fs.readFileSync(path.replace("../", "./"), {encoding:"utf8", flag:"r"})
                .replace(/\n/g, "") // remove line breaks
                .replace(/([^\\])'/g, "$1\\'") + "'"; // escape single quotes
            
            //TODO: can't have "\'" combinations in the file content from the line above

            if (index !== array.length - 1) {
                body += ",";
            }
            body += "\n";
        });


        return (header + body + footer);
    }

    grunt.registerTask(
        "build",
        "run a build",
    function() {
        var done = this.async();
        // Trace dependencies and concatenate files
        requirejs.optimize(config, function( response ) {
            console.log(response);
            done();
        }, function( err ) {
            done( err );
        });
    });
};

